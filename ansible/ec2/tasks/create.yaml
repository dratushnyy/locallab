--- # Playbook for creating ec2 instance instance, key, sec group

- hosts: localhost
  connection: local
  gather_facts: False
  tasks:

    - name: Create security group
      shell: 'aws ec2 create-security-group --group-name {{AWS.SEC_GROUP_NAME}} --description "security group for {{PROJECT_NAME}}"'
      register: security_group

    - set_fact: security_group="{{security_group.stdout | from_json}}"

    - name: Add ssh rule to security group
      shell: "aws ec2 authorize-security-group-ingress --group-name {{AWS.SEC_GROUP_NAME}} --protocol tcp --port 22 --cidr 0.0.0.0/0"

    - name: Add http rule to security group
      shell: "aws ec2 authorize-security-group-ingress --group-name {{AWS.SEC_GROUP_NAME}} --protocol tcp --port 80 --cidr 0.0.0.0/0"

    - name: Add https rule to security group
      shell: "aws ec2 authorize-security-group-ingress --group-name {{AWS.SEC_GROUP_NAME}} --protocol tcp --port 443 --cidr 0.0.0.0/0"

    - name: Create folder for keys
      file: path="{{playbook_dir}}/../keys" state=directory

    - name: Remove old ssh key
      shell: "rm -rf {{playbook_dir}}/../keys/instance_ssh_key"
      ignore_errors: true

    - name: Create ssh key
      shell: "aws ec2 create-key-pair --key-name {{AWS.SSH_KEY_NAME}} --query 'KeyMaterial' --output text > {{playbook_dir}}/../keys/instance_ssh_key"

    - name: Chmod ssh key file
      file: path="{{playbook_dir}}/../keys/instance_ssh_key" mode=400

    - name: Provision instance
      shell: "aws ec2 run-instances --image-id {{AWS.AMI}} --security-group-ids {{security_group.GroupId}} --count 1 --instance-type {{AWS.INSTANCE_TYPE}} --key-name {{AWS.SSH_KEY_NAME}} --query 'Instances[0].InstanceId' --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value={{PROJECT_NAME}}}, {Key=Project,Value={{PROJECT_NAME}}} ]' "
      register: ec2_response

    - set_fact: instance_id="{{ec2_response.stdout | from_json}}"

    - debug: msg="{{instance_id}}"

    - name: Sleep for 5 mins
      wait_for: timeout=300

    - name: Getting instance ip
      shell: "aws ec2 describe-instances --instance-ids {{instance_id}} --query 'Reservations[0].Instances[0].PublicIpAddress' "
      register: ec2_response

    - set_fact: instance_public_ip="{{ec2_response.stdout | from_json}}"

    - debug: msg="{{instance_public_ip}}"

    - name: Creating hosts file
      template: src="{{playbook_dir}}/templates/hosts.jinja2" dest="{{playbook_dir}}/../hosts"

    - name: Create Cloudflare DNS record
      cloudflare_dns:
        zone: "{{CLOUD_FLARE.ZONE}}"
        record: "{{PROJECT_NAME}}"
        type: A
        value: unique value
        solo: true
        proxied: true
        value: "{{instance_public_ip}}"
        account_email: "{{CLOUD_FLARE.ACCOUNT_EMAIL}}"
        account_api_token: "{{CLOUD_FLARE_API_TOKEN}}"
        state: present
      register: record

    - debug: msg="{{record}}"
